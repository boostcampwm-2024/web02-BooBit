services:
  # Service 컨테이너
  #Auth 서비스
  auth:
    container_name: auth-server
    build:
      context: .
      dockerfile: ./apps/auth/DockerFile
      args:
        DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@${AUTH_DB}:${MYSQL_PORT}/${MYSQL_DATABASE}
    ports:
      - '${AUTH_HOST_SERVICE_PORT}:3000'
    environment:
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@${AUTH_DB}:${MYSQL_PORT}/${MYSQL_DATABASE}
      REDIS_URL: 'redis://${SESSION_DB}:${REDIS_PORT}'
      SESSION_SECRET: ${SESSION_SECRET}
    depends_on:
      auth-db:
        condition: service_healthy
    restart: always

  # Balance 서비스
  balance:
    container_name: balance-server
    build:
      context: .
      dockerfile: ./apps/balance/DockerFile
      args:
        DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@${BALANCE_DB}:${MYSQL_PORT}/${MYSQL_DATABASE}
    ports:
      - '${BALANCE_HOST_SERVICE_PORT}:3000'
    environment:
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@${BALANCE_DB}:${MYSQL_PORT}/${MYSQL_DATABASE}
      REDIS_URL: 'redis://${SESSION_DB}:${REDIS_PORT}'
      SESSION_SECRET: ${SESSION_SECRET}
    depends_on:
      balance-db:
        condition: service_healthy
    restart: always

  # DB 컨테이너
  # Redis
  session-db:
    image: redis:7.2
    container_name: session-db
    ports:
      - '${REDIS_HOST_PORT}:${REDIS_PORT}'
    volumes:
      - redis-db:/data
    command: redis-server --appendonly yes
    restart: always
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 1m30s
      timeout: 30s
      retries: 3
      start_period: 30s

  # Auth DB
  auth-db:
    image: mysql:8.0.22
    container_name: auth-db
    ports:
      - '${AUTH_HOST_DB_PORT}:${MYSQL_PORT}'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - auth-db:/var/lib/mysql
      - ./docker_init/mysql_init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      interval: 10s
      timeout: 5s
      retries: 5

  # Balance DB
  balance-db:
    image: mysql:8.0.22
    container_name: balance-db
    ports:
      - '${BALANCE_HOST_DB_PORT}:${MYSQL_PORT}'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - balance-db:/var/lib/mysql
      - ./docker_init/mysql_init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      interval: 10s
      timeout: 5s
      retries: 5

  # Mongo DB
  mongo-db:
    image: mongo:8.0
    container_name: mongo-db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MYSQL_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - '27017:27017'
    volumes:
      - mongo-db:/data/db

  # MongoDB 관리를 위한 Web UI (선택사항)
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    ports:
      - '8081:8081'
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MYSQL_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MYSQL_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MYSQL_USER}:${MYSQL_PASSWORD}@mongo-db:27017/
    depends_on:
      - mongo-db

volumes:
  redis-db:
  auth-db:
  balance-db:
  mongo-db:
